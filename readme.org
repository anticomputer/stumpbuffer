* StumpBuffer

  An IBuffer inspired tool to control Stumpwm from Emacs. Still
  experimental and unstable. Currently does not work with float
  groups.

  Uses a lot of Stumpwms internals. This can't really be avoided since
  Stumpwm doesn't expose everything for programmatic access. Using the
  built-in commands would generally not work as those tend to require
  the target to be focused, while StumpBuffer must be able to execute
  them remotely.

* Installing

  Ensure that you have stumpish available. Load ~emacs/stumpbuffer/~
  in Emacs and ~cl/stumpbuffer/~ in Stumpwm.

* Use

  Use ~M-x stumpbuffer~ to open the buffer. This should show all
  groups and windows. ~M-x stumpbuffer-other-frame~ can be used to
  open the buffer in another frame, which will be killed when exiting
  the stumpbuffer.

  | Key       | Command                                                                                 |
  |-----------+-----------------------------------------------------------------------------------------|
  | ~n~       | Move to next line                                                                       |
  | ~p~       | Move to previous line                                                                   |
  | ~C-n~     | Move to next frame                                                                      |
  | ~C-p~     | Move to previous frame                                                                  |
  | ~TAB~     | Move to next group                                                                      |
  | ~BACKTAB~ | Move to previous group                                                                  |
  | ~g~       | Update                                                                                  |
  | ~RET~     | Focus and switch to                                                                     |
  | ~m~       | Mark                                                                                    |
  | ~u~       | Unmark                                                                                  |
  | ~U~       | Unmark all                                                                              |
  | ~% r~     | Mark windows whose title matches a regex                                                |
  | ~% R~     | Mark windows by role (defaults to current windows role, use prefix arg to force prompt) |
  | ~% c~     | Mark windows by class (same)                                                            |
  | ~% i~     | Mark windows by instance (same)                                                         |
  | ~% f~     | Mark windows in the same frame as the current window                                    |
  | ~% g~     | Mark windows in the same group as the current window                                    |
  | ~d~       | Mark for deletion (asks window to close itself)                                         |
  | ~k~       | Mark for kill (forces window to die; you should usually use delete instead)             |
  | ~*~       | Change all ~*~ marks to a different character                                           |
  | ~x~       | Execute marks                                                                           |
  | ~D~       | Delete                                                                                  |
  | ~K~       | Kill window (force it to die)                                                           |
  | ~N~       | Rename                                                                                  |
  | ~P~       | Pull (move marked windows here)                                                         |
  | ~T~       | Throw (move marked windows there)                                                       |
  | ~q~       | Quit                                                                                    |
  | ~s~       | Split frame vertically (only when point on frame name or window)                        |
  | ~S~       | Split frame horizontally (only when point on frame name or window)                      |
  | ~C~       | Create new group (takes marked windows with it)                                         |
  | ~f~       | Toggle frame name display                                                               |
  | ~r~       | Renumber group or window                                                                |
  | ~`~       | Cycle filter groups                                                                     |
  | ~^~       | Select filter group by name                                                             |

  The customization option ~stumpbuffer-quit-window-after-command~
  determines whether the buffer should be killed when executing
  certain commands (such as focusing a
  window). ~stumpbuffer-show-frames-p~ can be set to ~nil~ to hide
  frames from the list.

** Window row format
  
  The variable ~stumpbuffer-window-format~ determines which fields to
  show for windows. It should be a list of three element lists in form

  #+BEGIN_EXAMPLE
  ((field-key &optional width title format-fn)
   ...)
  #+END_EXAMPLE

  The ~field-key~ is the key returned by Stumpwm. ~width~ is the
  number of characters to show. The last field can have width of
  ~nil~. ~title~ is the title to show in the header. ~format-fn~ can
  be a custom function to format the fields value. The function takes
  a single argument -- the value -- and returns a string that should
  be shown in its place.

** Frame and group name format
  
  The variables ~stumpbuffer-frame-name-format~ and
  ~stumpbuffer-group-name-format~ control the format of frame and
  group names. They should be lists of lists in form

  #+BEGIN_EXAMPLE
  ((faces . things)
   ...)
  #+END_EXAMPLE

  Where ~faces~ is the name of a face or a list of face
  names. ~things~ is a list of things to insert. They can be

  - Strings :: Inserted as they are.
  - Keywords :: The key is looked up in the frame or group plist
                retrieved from Stumpwm.
  - A list ~(:call fn)~ :: Call ~fn~ with the plist. If it returns
       ~nil~, insert nothing. Otherwise insert the result.

** Faces

   Window names can be highlighted with custom faces. The variable
   ~stumpbuffer-window-faces~ is an alist of ~(fn . face)~ pairs. The
   ~face~ will be used for windows where ~fn~ return true.

   For example, the default value

   #+BEGIN_EXAMPLE
     '((stumpbuffer-window-visible-p . bold)
       (stumpbuffer-window-hidden-p . shadow))
   #+END_EXAMPLE

   will highlight all visible windows with the ~bold~ face, and hidden
   windows (iconified windows) with ~shadow~. If you wanted to
   highlight all Emacs windows with ~font-lock-string-face~, you could
   put

   #+BEGIN_EXAMPLE
     (defun my-stumpbuffer-emacs-p (window)
       (string-equal (getf window :class) "Emacs"))

     (add-to-list 'stumpbuffer-window-faces
                  '(my-stumpbuffer-emacs-p . font-lock-string-face))
   #+END_EXAMPLE

   in you Emacs init-file. Notice that all matching faces will be
   added to the windows, in the order they appear in. So in this case
   visible Emacs windows will have both ~bold~ and
   ~font-lock-string-face~.
   
** Filters

   The variable ~stumpbuffer-filter-groups~ contains an alist of
   filter groups. Each group should be a cons cell of a name (a
   string) and a list of filters in form ~(what . how)~. ~what~ should
   be either ~:hide-groups~, ~:show-groups~, ~:hide-windows~ or
   ~:show-windows~. The ~:hide-~ variants hide matching windows or
   groups, while the ~:show-~ variants hide non-matching ones.

   ~how~ is the actual filter. It can currently only be a list in form
   ~(:satisfying fn)~. The ~fn~ is a function to be called with the
   group or window plist (as retrieved from Stumpwm). If it returns
   true, the filter applies.

   For example (the default value),

   #+BEGIN_EXAMPLE
     '(("Everything")
       ("No hidden groups"
        (:hide-groups :satisfying stumpbuffer-group-hidden-p))
       ("Only hidden groups"
        (:show-groups :satisfying stumpbuffer-group-hidden-p)))
   #+END_EXAMPLE

   This defines three filter groups. The first one (the default group)
   will show everything. The second one hides all hidden groups. The
   third one only shows hidden groups. ~stumpbuffer-group-hidden-p~ is
   a very simple function:

   #+BEGIN_EXAMPLE
     (defun stumpbuffer-group-hidden-p (group)
       (getf group :hiddenp))
   #+END_EXAMPLE

   Stumpwm provides ~:hiddenp~ in group plists to tell whether it is a
   hidden group.
  
* Extending

** Stumpwm

   Variables ~STUMPBUFFER:*WINDOW-DATA-FIELDS*~,
   ~STUMPBUFFER:*GROUP-DATA-FIELDS*~ and
   ~STUMPBUFFER:*FRAME-DATA-FIELDS*~ contain alists of custom data
   fields to be passed to Emacs. The keys should be keywords and
   values functions to generate the value. For windows and groups the
   function takes a single argument, while frame functions should take
   both the group and the frame (in that order).

   The values should be something that can be printed out, and read by
   emacs. In other words, stick with keywords, numbers and strings.

** Emacs
*** Key maps

    ~stumpbuffer-mode-map~ is for keys that are always active in the
    buffer. ~stumpbuffer-mode-group-map~, ~stumpbuffer-mode-frame-map~
    and ~stumpbuffer-mode-window-map~ are only active when point is on
    a group name, frame name or a window respectively.
   
*** Marking

    ~stumpbuffer-mark~ and ~stumpbuffer-unmark~ can be used to add or
    remove mark from the window at point.

    ~stumpbuffer-mark-group~ and ~stumpbuffer-mark-frame~ will add a
    mark to all windows in the group or frame. They have a
    corresponding unmark function.
   
*** Getting information about things at point

    ~stumpbuffer-on-group-name~, ~stumpbuffer-on-frame-name~ and
    ~stumpbuffer-on-window~ will return a plist with information about
    the thing at point.

    Each of the plists have keys ~:start~ and ~:end~ containing the
    character positions of the thing. There is also a key
    ~<group|frame|window>-plist~ containing the property list
    retrieved from Stumpwm. Windows and frames also have the key
    ~:group~ containing the number of the group they're in. Windows
    may have a key ~:mark~ with the current mark of the window.

*** Custom mark functions

    The variable ~stumpbuffer-mark-functions~ contains an alist of
    mark characters and functions to call during
    ~stumpbuffer-execute-marks~. The function should take the window
    plist as returned by ~stumpbuffer-on-window~.
    
*** Iterating groups and windows

    ~stumpbuffer-map-groups~ can be used to apply a function to each
    group. The function should take a single argument, the plist
    returned by ~stumpbuffer-on-group-name~. The function will be
    called with point on the group name. Results of the function are
    discarded.

    ~stumpbuffer-map-windows~ calls a function on all
    windows. ~stumpbuffer-map-group-windows~ calls a function on
    windows in the group the point is
    on. ~stumpbuffer-map-marked-windows~ calls a function on marked
    windows.

    All of these have a corresponding macro
    ~stumpbuffer-do-<something>~.
   
*** Communicating with Stumpwm

    Communication happens through stumpish. ~stumpbuffer-command~ can
    be used to execute a command. The name will automatically have
    ~stumpbuffer-~ prepended to it, so the commands on Stumpwm side
    should have that prefix (alternatively just call stumpish
    yourself).

    The command should return something that Emacs can ~read~. This
    will be returned from ~stumpbuffer-command~. 

    There is a simple error handling mechanism. The command can return
    a two element list ~(:error msg)~, in which case Emacs will
    ~error~ with the message.
    
    Notice that since the communication goes through stumpish, the CL
    code must use ~MESSAGE~ to return values.
