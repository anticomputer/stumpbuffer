* StumpBuffer

  An IBuffer inspired tool to control Stumpwm from Emacs. Still
  experimental and unstable. Currently does not work with floating
  groups.

  Uses a lot of Stumpwms internals. This can't really be avoided since
  Stumpwm doesn't expose everything for programmatic access. Using the
  built-in commands would generally not work as those tend to require
  the target to be focused, while StumpBuffer must be able to execute
  them remotely.

* Installing

  Ensure that you have stumpish available. Load ~emacs/stumpbuffer/~
  in Emacs and ~cl/stumpbuffer/~ in Stumpwm.

* Use

  Use ~M-x stumpbuffer~ to open the buffer. This should show all
  groups and windows. ~M-x stumpbuffer-other-frame~ can be used to
  open the buffer in another frame, which will be killed when exiting
  the stumpbuffer.

  The customization option ~stumpbuffer-quit-window-after-command~
  determines whether the buffer should be killed when executing
  certain commands (such as focusing a
  window). ~stumpbuffer-show-frames-p~ can be set to ~nil~ to hide
  frames from the list.

  The variable ~stumpbuffer-window-format~ determines which fields to
  show for windows. It should be a list of three element lists in form

  #+BEGIN_EXAMPLE
  ((field-key width title)
   ...)
  #+END_EXAMPLE

  The field key is the one returned by Stumpwm. Width should be the
  number of characters to show. The last field can have width of
  ~nil~. Title is the title to show in the header.

  | Key       | Command                                                                                 |
  |-----------+-----------------------------------------------------------------------------------------|
  | ~n~       | Move to next line                                                                       |
  | ~p~       | Move to previous line                                                                   |
  | ~C-n~     | Move to next frame                                                                      |
  | ~C-p~     | Move to previous frame                                                                  |
  | ~TAB~     | Move to next group                                                                      |
  | ~BACKTAB~ | Move to previous group                                                                  |
  | ~g~       | Update                                                                                  |
  | ~RET~     | Focus and switch to                                                                     |
  | ~m~       | Mark                                                                                    |
  | ~u~       | Unmark                                                                                  |
  | ~U~       | Unmark all                                                                              |
  | ~% r~     | Mark windows whose title matches a regex                                                |
  | ~% R~     | Mark windows by role (defaults to current windows role, use prefix arg to force prompt) |
  | ~% c~     | Mark windows by class (same)                                                            |
  | ~% i~     | Mark windows by instance (same)                                                         |
  | ~% f~     | Mark windows in the same frame as the current window                                    |
  | ~% g~     | Mark windows in the same group as the current window                                    |
  | ~d~       | Mark for kill                                                                           |
  | ~*~       | Change all ~*~ marks to a different character                                           |
  | ~x~       | Execute marks                                                                           |
  | ~D~       | Kill                                                                                    |
  | ~N~       | Rename                                                                                  |
  | ~P~       | Pull (move marked windows here)                                                         |
  | ~T~       | Throw (move marked windows there)                                                       |
  | ~q~       | Quit                                                                                    |
  | ~s~       | Split frame vertically (only when point on frame name)                                  |
  | ~S~       | Split frame horizontally (only when point on frame name)                                |
  | ~C~       | Create new group (takes marked windows with it)                                         |

* Extending

** Stumpwm

   Variables ~STUMPBUFFER:*WINDOW-DATA-FIELDS*~,
   ~STUMPBUFFER:*GROUP-DATA-FIELDS*~ and
   ~STUMPBUFFER:*FRAME-DATA-FIELDS*~ contain alists of custom data
   fields to be passed to Emacs. The keys should be keywords and
   values functions to generate the value. For windows and groups the
   function takes a single argument, while frame functions should take
   both the group and the frame (in that order).

   The values should be something that can be printed out, and read by
   emacs. In other words, stick with keywords, numbers and strings.

** Emacs

*** Key maps

    ~stumpbuffer-mode-map~ is for keys that are always active in the
    buffer. ~stumpbuffer-mode-group-map~, ~stumpbuffer-mode-frame-map~
    and ~stumpbuffer-mode-window-map~ are only active when point is on
    a group name, frame name or a window respectively.
   
*** Marking

    ~stumpbuffer-mark~ and ~stumpbuffer-unmark~ can be used to add or
    remove mark from the window at point.

    ~stumpbuffer-mark-group~ and ~stumpbuffer-mark-frame~ will add a
    mark to all windows in the group or frame. They have a
    corresponding unmark function.
   
*** Getting information about things at point

    ~stumpbuffer-on-group-name~, ~stumpbuffer-on-frame-name~ and
    ~stumpbuffer-on-window~ will return a plist with information about
    the thing at point.

    Each of the plists have keys ~:start~ and ~:end~ containing the
    character positions of the thing. There is also a key
    ~<group|frame|window>-plist~ containing the property list
    retrieved from Stumpwm. Windows and frames also have the key
    ~:group~ containing the number of the group they're in. Windows
    may have a key ~:mark~ with the current mark of the window.

*** Custom mark functions

    The variable ~stumpbuffer-mark-functions~ contains an alist of
    mark characters and functions to call during
    ~stumpbuffer-execute-marks~. The function should take the window
    plist as returned by ~stumpbuffer-on-window~.
    
*** Iterating groups and windows

    ~stumpbuffer-map-groups~ can be used to apply a function to each
    group. The function should take a single argument, the plist
    returned by ~stumpbuffer-on-group-name~. The function will be
    called with point on the group name. Results of the function are
    discarded.

    ~stumpbuffer-map-windows~ calls a function on all
    windows. ~stumpbuffer-map-group-windows~ calls a function on
    windows in the group the point is
    on. ~stumpbuffer-map-marked-windows~ calls a function on marked
    windows.

    All of these have a corresponding macro
    ~stumpbuffer-do-<something>~.
   
*** Filters

    Filters are implemented with a very simple mechanism. The
    variables ~stumpbuffer-group-filters~ and
    ~stumpbuffer-window-filters~ contain a list of functions. The
    function should take a single argument, a group or window plist as
    retrieved from Stumpwm, and return ~t~ if it should be filtered
    out.

*** Faces

    The variable ~stumpbuffer-window-faces~ is a list of ~(fn . face)~
    pairs, where the ~fn~ is a function which takes a window plist
    (the one retrieved from Stumpwm) as an argument, and returns true
    if the window should be shown with the face.

*** Communicating with Stumpwm

    Communication happens through stumpish. ~stumpbuffer-command~ can
    be used to execute a command. The name will automatically have
    ~stumpbuffer-~ prepended to it, so the commands on Stumpwm side
    should have that prefix (alternatively just call stumpish
    yourself).

    The command should return something that Emacs can ~read~. This
    will be returned from ~stumpbuffer-command~. 

    There is a simple error handling mechanism. The command can return
    a two element list ~(:error msg)~, in which case Emacs will
    ~error~ with the message.
    
    Notice that since the communication goes through stumpish, the CL
    code must use ~MESSAGE~ to return values.
